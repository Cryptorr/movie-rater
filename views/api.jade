extends layout

block link
  -var selected = 'Api';

block content
  h1= title
  ul
    li  
      h3 API Documentation
      p
          | All api calls are made through /api
          style(type='text/css').
            .tg  {border-collapse:collapse;border-spacing:0;border-color:#ccc;}
            .tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#fff;}
            .tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#f0f0f0;}
            .tg .tg-slkj{font-family:"Lucida Console", Monaco, monospace !important;;text-align:center}
            .tg .tg-431l{font-family:Arial, Helvetica, sans-serif !important;;text-align:center}
          table.tg
            tr
              th.tg-431l Parameters Required
              |     
              th.tg-431l Description
            |   
            tr
              td.tg-slkj api_key
              |     
              td.tg-431l Unique api key
    li 
      h3 Account
      ul
        li
          h4 /make_account
          ul
            li
              h5 POST
              style(type='text/css').
                    .tg {border-collapse:collapse;border-spacing:0;border-color:#ccc;}
                    .tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#fff;}
                    .tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#f0f0f0;}
                    .tg .tg-s6z2{text-align:center}
                    .tg .tg-slkj{font-family:"Lucida Console", Monaco, monospace !important;;text-align:center}
                    .tg .tg-431l{font-family:Arial, Helvetica, sans-serif !important;;text-align:center}
              table.tg
                tr
                  th.tg-431l Parameters Required
                  |     
                  th.tg-431l Description
                |   
                tr
                  td.tg-slkj name
                  |     
                  td.tg-431l The user&apos;s name
                |   
                tr
                  td.tg-slkj pass
                  |     
                  td.tg-s6z2 The user&apos;s password
              p Will create a user with username 'name' and password 'pass'. If the username already exists it will return the message 'Account already exists!' and the account won't be created.
            li
              h5 GET
              p Will return a json object containing every user
        li 
          h4 /login
          ul
            li
              h5 POST
              style(type='text/css').
                .tg  {border-collapse:collapse;border-spacing:0;border-color:#ccc;}
                  .tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#fff;}
                  .tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#f0f0f0;}
                  .tg .tg-s6z2{text-align:center}
                  .tg .tg-slkj{font-family:"Lucida Console", Monaco, monospace !important;;text-align:center}
                  .tg .tg-431l{font-family:Arial, Helvetica, sans-serif !important;;text-align:center}
              table.tg
                tr
                  th.tg-431l Parameters Required
                  |     
                  th.tg-431l Description
                |   
                tr
                  td.tg-slkj name
                  |     
                  td.tg-431l The user&apos;s name
                |   
                tr
                  td.tg-slkj pass
                  |     
                  td.tg-s6z2 The user's password
              p Used to login into user 'name' with password 'pass'. If the username does not exist it will return the message 'Username does not exist'. If the user exists but the password is incorrect it returns 'Incorrect password'
    li
      h3 Movies
      ul
        li
          h4 /movies
          ul
            li
              h5 POST
              //The ugly starts now
              p Requires 'title' for the movie title, 'poster' for the path to the movie poster and 'genres', an array with all the genres for the movie. It will create an entry for the movie with title 'title' in the database with the data provided
              h5 GET
              p Will return a json object with all movies
          h4 /movies/:id
          h5 GET
          p Will retrieve all the information in the form of a json object of the movie with id ':id' if it exists.
          h5 PUT
          p Requires any of the following: 'title', 'poster', 'genres', 'rating', 'votes'. It will update the entry for the movie with id ':id' if it exists with the optional values given.
          h5 DELETE
          p Will delete the entry from the database for movie with id ':id'
      h3 Rating
      h4 /rate
      h5 POST
      p Requires 'id' for the movie id, 'val' for rating value (From 0 to 5 in 0.5 steps), and in case the movie is not yet in the database it also requires 'title' for the title, 'poster' for the movie poster and 'genres' for movie genres. If the movie exists in the database it will add a rating to it with value 'val' and save it so that the user that rated cannot rate again on the same movie. If the movie does not exist in the database it will be added similarly to /movies POST.
      h4 /rate/:id
      h5 GET
      p Returns the rating for the movie with 'id' ':id'
      h4 /toprated
      h5 GET
      p Returns a json array with the 10 best rated movies currently on the website's database
      h4 /toprated/:genre
      p Returns a json array with the 10 best rated movies currently on the website's database with genre ':genre'
      h3 Comments
      h4 /comment
      h5 POST
      p Requires 'id' for the movie id where the comment is being left, 'content' for the actual comment, and in case the movie is not in the database, 'title' for the movie title, 'poster' for the path of the movie poster and 'genres' for an array of movie genres. If the movie exists in the database, a comment will be added to the comment database by whatever user is logged in. In case the movie does not exist it will be added to the database, and then the comment will be added to the comment database.
      h5 GET
      p Returns a json object containing every comment.
      h4 /comment/:id
      h5 GET
      p Returns all comments for a movie  with id ':id'